process.env.NTBA_FIX_319 = 1;
process.env.NTBA_FIX_350 = 0;

/* server */
require("dotenv").config({ path: "/home/node/hello-world/.env" });
const TELEGRAM_CHAT_ID = "@for_forecast";

/* local */
// require("dotenv").config();
// const TELEGRAM_CHAT_ID = "@foooor_forecast";

const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
const customParseFormat = require("dayjs/plugin/customParseFormat");

require("dayjs/locale/ru");

dayjs.extend(customParseFormat);
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.locale("ru");

const fs = require("fs");
const path = require("path");
const axios = require("axios");
const generateImage = require("./generateImage");
const generateForecast = require("./generateForecast");
const TelegramBot = require("node-telegram-bot-api");

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });
const imagesDir = path.join(__dirname, "public/images");

async function fetchTopEventsWithRetry(url, retries = 5, delay = 3000) {
  for (let i = 0; i < retries; i++) {
    try {
      const response = await axios.get(url);
      console.log(`+ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å ${url}`);
      return response.data;
    } catch (err) {
      console.error(
        `- –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url} (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}):`,
        err.message
      );
      await new Promise((resolve) => setTimeout(resolve, delay));
      delay *= 2;
    }
  }
  console.warn(
    `! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å ${url} –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`
  );
  return [];
}

async function buildCaption(event) {
  let forecastText = "";
  if (event.forecast?.content) {
    forecastText = await generateForecast(event.forecast.content);
  }
  console.log("üì§ Raw content –æ—Ç DeepSeek:", forecastText);
  return `${forecastText}`;
}

async function generateAllImages() {
  // –û—á–∏—Å—Ç–∏–º –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  fs.readdirSync(imagesDir).forEach((file) => {
    if (file.endsWith(".png")) {
      fs.unlinkSync(path.join(imagesDir, file));
    }
  });

  console.log("+ –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.");

  const urls = [
    "https://leon.ru/blog/api/top-events?limit=4&sport_id=1",
    // "https://leon.ru/blog/api/top-events?limit=1&sport_id=2",
    "https://leon.ru/blog/api/top-events?limit=4&sport_id=3",
  ];

  let allEvents = [];

  for (const url of urls) {
    const data = await fetchTopEventsWithRetry(url);
    allEvents = allEvents.concat(data);
  }

  console.log("+ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—É—á–µ–Ω–æ:", allEvents.length);

  for (const event of allEvents) {
    console.log("+ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è:", event.slug);
    if (!event.rates) {
      console.warn("! –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è rates:", event.slug);
      continue;
    }

    const filename = `${event.slug}.png`;
    try {
      await generateImage(event, filename);
      console.log("+ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", filename);
    } catch (err) {
      console.error("- –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err.message);
    }
  }

  return allEvents;
}

async function postImagesWithDelay(events) {
  for (let i = 0; i < events.length; i++) {
    const event = events[i];
    const filename = `${event.slug}.png`;
    const filepath = path.join(imagesDir, filename);

    console.log(`+ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${i + 1} / ${events.length}: ${filename}`);

    if (!fs.existsSync(filepath)) {
      console.warn("! –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", filename);
      continue;
    }

    const imageBuffer = fs.readFileSync(filepath);
    const caption = await buildCaption(event);

    try {
      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¢–ì:", filename);
      await bot.sendPhoto(TELEGRAM_CHAT_ID, imageBuffer, {
        caption,
        parse_mode: "HTML",
      });
      console.log("+ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:", filename);
    } catch (err) {
      console.error("- –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err.message);
    }

    if (i < events.length - 1) {
      console.log("–ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...");
      await new Promise((resolve) => setTimeout(resolve, 30 * 60 * 1000)); // 30 –º–∏–Ω—É—Ç
    }
  }
}

async function main() {
  try {
    console.log("+ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...");
    const events = await generateAllImages();
    await postImagesWithDelay(events);
    console.log("+ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.");
  } catch (err) {
    console.error("! –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main():", err.message);
  }
}

main();
